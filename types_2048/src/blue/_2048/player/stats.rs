// @generated - This file is generated by esquema-codegen (forked from atrium-codegen). DO NOT EDIT.
//!Definitions for the `blue.2048.player.stats` namespace.
use atrium_api::types::TryFromUnknown;
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct RecordData {
    ///Average score across all games
    pub average_score: i64,
    pub created_at: atrium_api::types::string::Datetime,
    ///Total numbers of games the user has played
    pub games_played: i64,
    ///The highest number block the player has fround. example 128, 256, etc
    pub highest_number_block: i64,
    ///The highest score the user has gotten in a game
    pub highest_score: i64,
    ///The smallest number of moves to get the 2048 block
    pub least_moves_to_find_twenty_forty_eight: i64,
    ///The sync status of this record with the users AT Protocol repo.
    pub sync_status: crate::blue::_2048::defs::SyncStatus,
    ///Times the 2048 block has been found also count as wins
    pub times_twenty_forty_eight_been_found: i64,
    ///Total score across all games
    pub total_score: i64,
}
pub type Record = atrium_api::types::Object<RecordData>;
impl From<atrium_api::types::Unknown> for RecordData {
    fn from(value: atrium_api::types::Unknown) -> Self {
        Self::try_from_unknown(value).unwrap()
    }
}
